name: Create, Deploy to Dev or Staging Env
on:
  workflow_dispatch:
    inputs:
      PR_number:
        description: 'Pull request number'
        required: true
#permissions:
#  contents: write
jobs:
  deploy-to-dev-or-stg:
    runs-on: ubuntu-latest
    steps:
      - name: Verify Pull Request Number
        uses: actions/github-script@v6.4.0
        id: verify_pr_number
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const response = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.inputs.PR_number }}
            });
          
             // Check if the pull request is open
            if (response.data.number !== ${{ github.event.inputs.PR_number }} || response.data.state != "open") {
              throw new Error('Pull request is not open or number is not valid!');
            } else {
            console.log("PR ref: " + response.data.head.ref);
            console.log("Status of the PR ref: " + response.data.state);
            console.log("Event Name: " + github.event_name);
            console.log("Base Branch Name: " + response.data.base.ref);
            return response.data.head.ref;
            }
        ############ github.event_name isn't  'pull_request'##########
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true
      - uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.rest.issues.createComment({
              issue_number: ${{ github.event.inputs.PR_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
        # Slack channel id, channel name, or user id to post message.
        # See also: https://api.slack.com/methods/chat.postMessage#channels
        # For posting a rich message using Block Kit
          payload: |
            {
              "text": "Deployment of  PR: ${{ github.event.inputs.PR_number  }} started \n ${{ env.GITHUB_REF }} ${{ env.GITHUB_EVENT_NAME }} ${{ env.GITHUB_ACTOR }} " }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
